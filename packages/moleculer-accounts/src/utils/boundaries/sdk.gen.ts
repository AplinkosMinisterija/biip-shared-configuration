// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { CountiesSearchData, CountiesSearchResponse, CountiesSearchError, CountiesGetData, CountiesGetResponse, CountiesGetError, CountiesGetWithGeometryData, CountiesGetWithGeometryResponse, CountiesGetWithGeometryError, MunicipalitiesSearchData, MunicipalitiesSearchResponse, MunicipalitiesSearchError, MunicipalitiesGetData, MunicipalitiesGetResponse, MunicipalitiesGetError, MunicipalitiesGetWithGeometryData, MunicipalitiesGetWithGeometryResponse, MunicipalitiesGetWithGeometryError, EldershipsSearchData, EldershipsSearchResponse, EldershipsSearchError, EldershipsGetData, EldershipsGetResponse, EldershipsGetError, EldershipsGetWithGeometryData, EldershipsGetWithGeometryResponse, EldershipsGetWithGeometryError, ResidentialAreasSearchData, ResidentialAreasSearchResponse, ResidentialAreasSearchError, ResidentialAreasGetData, ResidentialAreasGetResponse, ResidentialAreasGetError, ResidentialAreasGetWithGeometryData, ResidentialAreasGetWithGeometryResponse, ResidentialAreasGetWithGeometryError, StreetsSearchData, StreetsSearchResponse, StreetsSearchError, StreetsGetData, StreetsGetResponse, StreetsGetError, StreetsGetWithGeometryData, StreetsGetWithGeometryResponse, StreetsGetWithGeometryError, AddressesSearchData, AddressesSearchResponse, AddressesSearchError, AddressesGetData, AddressesGetResponse, AddressesGetError, RoomsSearchData, RoomsSearchResponse, RoomsSearchError, RoomsGetData, RoomsGetResponse, RoomsGetError, ParcelsSearchData, ParcelsSearchResponse, ParcelsSearchError, GetHealthHealthGetData, GetHealthHealthGetResponse, GetHealthHealthGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Search for counties with pagination using various filters
 * Search for counties with pagination using various filters such as county codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const countiesSearch = <ThrowOnError extends boolean = false>(options: Options<CountiesSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CountiesSearchResponse, CountiesSearchError, ThrowOnError>({
        url: '/v1/counties/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get county by code
 * Retrieve a county by its unique code.
 */
export const countiesGet = <ThrowOnError extends boolean = false>(options: Options<CountiesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CountiesGetResponse, CountiesGetError, ThrowOnError>({
        url: '/v1/counties/{code}',
        ...options
    });
};

/**
 * Get county with geometry by code
 * Retrieve a county along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
 */
export const countiesGetWithGeometry = <ThrowOnError extends boolean = false>(options: Options<CountiesGetWithGeometryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CountiesGetWithGeometryResponse, CountiesGetWithGeometryError, ThrowOnError>({
        url: '/v1/counties/{code}/geometry',
        ...options
    });
};

/**
 * Search for municipalities with pagination using various filters
 * Search for municipalities with pagination using various filters such as municipality codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const municipalitiesSearch = <ThrowOnError extends boolean = false>(options: Options<MunicipalitiesSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MunicipalitiesSearchResponse, MunicipalitiesSearchError, ThrowOnError>({
        url: '/v1/municipalities/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get municipality by code
 * Retrieve a municipality by its unique code.
 */
export const municipalitiesGet = <ThrowOnError extends boolean = false>(options: Options<MunicipalitiesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MunicipalitiesGetResponse, MunicipalitiesGetError, ThrowOnError>({
        url: '/v1/municipalities/{code}',
        ...options
    });
};

/**
 * Get municipality with geometry by code
 * Retrieve a municipality along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
 */
export const municipalitiesGetWithGeometry = <ThrowOnError extends boolean = false>(options: Options<MunicipalitiesGetWithGeometryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MunicipalitiesGetWithGeometryResponse, MunicipalitiesGetWithGeometryError, ThrowOnError>({
        url: '/v1/municipalities/{code}/geometry',
        ...options
    });
};

/**
 * Search for elderships with pagination using various filters
 * Search for elderships with pagination using various filters such as eldership codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const eldershipsSearch = <ThrowOnError extends boolean = false>(options: Options<EldershipsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EldershipsSearchResponse, EldershipsSearchError, ThrowOnError>({
        url: '/v1/elderships/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get eldership by code
 * Retrieve a eldership by its unique code.
 */
export const eldershipsGet = <ThrowOnError extends boolean = false>(options: Options<EldershipsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EldershipsGetResponse, EldershipsGetError, ThrowOnError>({
        url: '/v1/elderships/{code}',
        ...options
    });
};

/**
 * Get eldership with geometry by code
 * Retrieve a eldership along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
 */
export const eldershipsGetWithGeometry = <ThrowOnError extends boolean = false>(options: Options<EldershipsGetWithGeometryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EldershipsGetWithGeometryResponse, EldershipsGetWithGeometryError, ThrowOnError>({
        url: '/v1/elderships/{code}/geometry',
        ...options
    });
};

/**
 * Search for residential areas with pagination using various filters
 * Search for residential areas with pagination using various filters such as residential area codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const residentialAreasSearch = <ThrowOnError extends boolean = false>(options: Options<ResidentialAreasSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResidentialAreasSearchResponse, ResidentialAreasSearchError, ThrowOnError>({
        url: '/v1/residential-areas/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get residential area by code
 * Retrieve a residential area by its unique code.
 */
export const residentialAreasGet = <ThrowOnError extends boolean = false>(options: Options<ResidentialAreasGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResidentialAreasGetResponse, ResidentialAreasGetError, ThrowOnError>({
        url: '/v1/residential-areas/{code}',
        ...options
    });
};

/**
 * Get residential area with geometry by code
 * Retrieve a residential area along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
 */
export const residentialAreasGetWithGeometry = <ThrowOnError extends boolean = false>(options: Options<ResidentialAreasGetWithGeometryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResidentialAreasGetWithGeometryResponse, ResidentialAreasGetWithGeometryError, ThrowOnError>({
        url: '/v1/residential-areas/{code}/geometry',
        ...options
    });
};

/**
 * Search for streets with pagination using various filters
 * Search for streets with pagination using various filters such as street codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const streetsSearch = <ThrowOnError extends boolean = false>(options: Options<StreetsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreetsSearchResponse, StreetsSearchError, ThrowOnError>({
        url: '/v1/streets/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get street by code
 * Retrieve a street by its unique code.
 */
export const streetsGet = <ThrowOnError extends boolean = false>(options: Options<StreetsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreetsGetResponse, StreetsGetError, ThrowOnError>({
        url: '/v1/streets/{code}',
        ...options
    });
};

/**
 * Get street with geometry by code
 * Retrieve a street along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
 */
export const streetsGetWithGeometry = <ThrowOnError extends boolean = false>(options: Options<StreetsGetWithGeometryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreetsGetWithGeometryResponse, StreetsGetWithGeometryError, ThrowOnError>({
        url: '/v1/streets/{code}/geometry',
        ...options
    });
};

/**
 * Search for address with pagination using various filters
 * Search for addresses with pagination using various filters such as address codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const addressesSearch = <ThrowOnError extends boolean = false>(options: Options<AddressesSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddressesSearchResponse, AddressesSearchError, ThrowOnError>({
        url: '/v1/addresses/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get address by code
 * Retrieve a address by its unique code.
 */
export const addressesGet = <ThrowOnError extends boolean = false>(options: Options<AddressesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AddressesGetResponse, AddressesGetError, ThrowOnError>({
        url: '/v1/addresses/{code}',
        ...options
    });
};

/**
 * Search for rooms with pagination using various filters
 * Search for rooms with pagination using various filters such as address codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const roomsSearch = <ThrowOnError extends boolean = false>(options: Options<RoomsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RoomsSearchResponse, RoomsSearchError, ThrowOnError>({
        url: '/v1/rooms/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get room by code
 * Retrieve a room by its unique code.
 */
export const roomsGet = <ThrowOnError extends boolean = false>(options: Options<RoomsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoomsGetResponse, RoomsGetError, ThrowOnError>({
        url: '/v1/rooms/{code}',
        ...options
    });
};

/**
 * Search for parcels with pagination using various filters
 * Search for parcels with pagination using various filters such as parcel unique numbers, cadastral numbers. Additionally, you can filter by GeoJson, EWKT geometry
 */
export const parcelsSearch = <ThrowOnError extends boolean = false>(options: Options<ParcelsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParcelsSearchResponse, ParcelsSearchError, ThrowOnError>({
        url: '/v1/parcels/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Perform a Health Check
 * Endpoint to perform a healthcheck on. This endpoint can primarily be used Docker
 * to ensure a robust container orchestration and management is in place. Other
 * services which rely on proper functioning of the API service will not deploy if this
 * endpoint returns any other HTTP status code except 200 (OK).
 * Returns:
 * HealthCheck: Returns a JSON response with the health status
 */
export const getHealthHealthGet = <ThrowOnError extends boolean = false>(options?: Options<GetHealthHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthHealthGetResponse, GetHealthHealthGetError, ThrowOnError>({
        url: '/health',
        ...options
    });
};